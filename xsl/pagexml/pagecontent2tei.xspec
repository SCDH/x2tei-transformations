<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:p2t="http://scdh.wwu.de/transform/pagexml2tei#" xmlns:t="http://www.tei-c.org/ns/1.0"
    stylesheet="pagecontent2tei.xsl" run-as="external">

    <x:scenario label="general structure">
        <x:param name="p2t:words" select="false()"/>
        <x:context href="../../test/samples/pagexml_chronicle/0007_p007.xml" mode="p2t:source"/>
        <x:expect label="TEI root element" test="exists(/t:TEI)"/>
        <x:expect label="has header" test="exists(/t:TEI/t:teiHeader)"/>
        <x:expect label="has file description" test="exists(/t:TEI/t:teiHeader/t:fileDesc)"/>
        <x:expect label="has title statement"
            test="exists(/t:TEI/t:teiHeader/t:fileDesc/t:titleStmt)"/>
        <x:expect label="has publication statement"
            test="exists(/t:TEI/t:teiHeader/t:fileDesc/t:publicationStmt)"/>
        <x:expect label="has source description"
            test="exists(/t:TEI/t:teiHeader/t:fileDesc/t:sourceDesc)"/>
        <x:expect label="has facsimile" test="exists(/t:TEI/t:facsimile)"/>
        <x:expect label="has surface" test="exists(/t:TEI/t:facsimile/t:surface)"/>
        <x:expect label="has graphic" test="exists(/t:TEI/t:facsimile/t:surface/t:graphic)"/>
        <x:expect label="has graphic/@url"
            test="exists(/t:TEI/t:facsimile/t:surface/t:graphic/@url)"/>
        <x:expect label="has zone" test="exists(/t:TEI/t:facsimile/t:surface/t:zone)"/>
        <x:expect label="every zone has an xml:id"
            test="every $z in /t:TEI/t:facsimile/t:surface/t:zone satisfies exists($z/@xml:id)"/>
        <x:expect label="has zone/@ulx for page"
            test="exists(/t:TEI/t:facsimile/t:surface/t:zone[@type eq 'Page']/@ulx)"/>
        <x:expect label="has zone/@points+ for text line"
            test="exists(/t:TEI/t:facsimile/t:surface/t:zone[@type eq 'TextLine']/@points)"/>
        <x:expect label="has zone/@points for text region"
            test="exists(/t:TEI/t:facsimile/t:surface/t:zone[@type eq 'TextRegion']/@points)"/>
        <x:expect label="every zone has an @start, except for pages"
            test="every $z in /t:TEI/t:facsimile/t:surface/t:zone[@type ne 'Page'] satisfies exists($z/@start)"/>
        <x:expect label="every @start in facsimile can be dereferenced"
            test="every $s in /t:TEI/t:facsimile/t:surface/t:zone/@start satisfies exists(id(substring($s, 2)))"/>
        <x:expect label="every @start in facsimile can be dereferenced, except words"
            test="every $s in /t:TEI/t:facsimile/t:surface/t:zone[@type ne 'Word']/@start satisfies exists(id(substring($s, 2)))"/>
        <x:expect label="has text" test="exists(/t:TEI/t:text)"/>
        <x:expect label="has body" test="exists(/t:TEI/t:text/t:body)"/>
        <x:expect label="div starts with a pb" test="t:TEI/t:text/t:body/element()[1] ! name(.)"
            select="'pb'"/>
        <x:expect label="has paragraphs" test="exists(t:TEI/t:text/t:body/t:p)"/>
        <x:expect label="has line beginnings" test="exists(t:TEI/t:text/t:body/t:p/t:lb)"/>
        <x:expect label="every lb is in a paragraph"
            test="every $p in /t:TEI/t:text//t:lb/parent::* satisfies name($p) eq 'p'"/>
        <x:expect label="all text in paragraphs"
            test="every $p in /t:TEI/t:text//text()[normalize-space(.) ne '']/parent::* satisfies name($p) eq 'p'"/>
        <x:expect label="every element in text has an ID"
            test="every $el in /t:TEI/t:text//(t:p | t:lb | t:w) satisfies exists($el/@xml:id)"/>
        <x:expect label="every element in text has @facs"
            test="every $el in /t:TEI/t:text//(t:pb | t:p | t:lb | t:w) satisfies exists($el/@facs)"/>
        <x:expect label="every facs pointer can be dereferenced"
            test="every $facs in /t:TEI/t:text//@facs ! tokenize(.) satisfies exists(id(substring($facs, 2)))"/>
        <!--x:expect label="result"/-->
    </x:scenario>

    <x:scenario label="general structure with words">
        <x:param name="p2t:words" select="true()"/>
        <x:context href="../../test/samples/pagexml_chronicle/0007_p007.xml" mode="p2t:source"/>
        <x:expect label="has line words" test="exists(t:TEI/t:text/t:body/t:p/t:w)"/>
        <x:expect label="every words is in a paragraph"
            test="every $p in /t:TEI/t:text//t:w/parent::* satisfies name($p) eq 'p'"/>
        <x:expect label="all text in words"
            test="every $p in /t:TEI/t:text//text()[normalize-space(.) ne '']/parent::* satisfies name($p) eq 'w'"/>
        <x:expect label="every element in text has an ID"
            test="every $el in /t:TEI/t:text//(t:p | t:lb | t:w) satisfies exists($el/@xml:id)"/>
        <x:expect label="every element in text has an @facs"
            test="every $el in /t:TEI/t:text//(t:p | t:lb | t:w) satisfies exists($el/@facs)"/>
        <x:expect label="every facs pointer can be dereferenced"
            test="every $facs in /t:TEI/t:text//@facs ! tokenize(.) satisfies exists(id(substring($facs, 2)))"/>
        <x:expect label="every @start in facsimile can be dereferenced"
            test="every $s in /t:TEI/t:facsimile/t:surface/t:zone/@start satisfies exists(id(substring($s, 2)))"/>
        <!--x:expect label="result"/-->
    </x:scenario>

    <x:scenario label="general structure without text IDs">
        <x:param name="p2t:with-start" select="false()"/>
        <x:param name="p2t:with-text-ids" select="false()"/>
        <x:context href="../../test/samples/pagexml_chronicle/0007_p007.xml" mode="p2t:source"/>
        <x:expect label="every zone has an @start"
            test="every $z in /t:TEI/t:facsimile/t:surface/t:zone satisfies not(exists($z/@start))"/>
        <x:expect label="every element in text has no ID"
            test="every $el in /t:TEI/t:text//(t:pb | t:p | t:lb | t:w) satisfies not(exists($el/@xml:id))"/>
        <x:expect label="every element in text has @facs"
            test="every $el in /t:TEI/t:text//(t:pb | t:p | t:lb | t:w) satisfies exists($el/@facs)"/>
        <x:expect label="every facs pointer can be dereferenced"
            test="every $facs in /t:TEI/t:text//@facs ! tokenize(.) satisfies exists(id(substring($facs, 2)))"
        />
    </x:scenario>

    <x:scenario label="initial template xsl:initial-template">
        <x:param name="p2t:collection-uri"
            select="xs:anyURI('../../test/samples/pagexml_chronicle?select=*_p*.xml')"/>
        <x:call template="xsl:initial-template"/>
        <x:expect label="2 pages" test="count(/t:TEI/t:text//t:pb)" select="2"/>
        <x:expect label="join paragraph has 2 facs links"
            test="some $p in t:TEI/t:text//t:p satisfies count(tokenize($p/@facs)) eq 2"/>
        <x:expect label="every @start in facsimile can be dereferenced"
            pending="when paragraphs are joined across page boundaries, a zone/@start breaks"
            test="every $s in /t:TEI/t:facsimile/t:surface/t:zone[@type ne 'Word']/@start satisfies exists(id(substring($s, 2)))"
        />
    </x:scenario>

    <x:scenario label="initial template pt2:collection-uri">
        <x:param name="p2t:collection-uri"
            select="xs:anyURI('../../test/samples/pagexml_chronicle?select=*_p*.xml')"/>
        <x:call template="p2t:collection-uri"/>
        <x:expect label="2 pages" test="count(/t:TEI/t:text//t:pb)" select="2"/>
    </x:scenario>

    <x:scenario label="initial template pt2:collection">
        <x:param name="p2t:collection-uri"
            select="xs:anyURI('../../test/samples/pagexml_chronicle/collection.xml')"/>
        <x:call template="p2t:collection"/>
        <x:expect label="2 pages" test="count(/t:TEI/t:text//t:pb)" select="2"/>
    </x:scenario>

    <x:scenario label="initial template pt2:collection-string"
        pending="we do not touch the test template p2t:collection because it works in the frontend">
        <x:param name="p2t:collection"
            select="unparsed-text('../../../test/samples/pagexml_chronicle/collection.xml')"/>
        <x:call template="p2t:collection-string"/>
        <x:expect label="2 pages" test="count(/t:TEI/t:text//t:pb)" select="2"/>
    </x:scenario>



    <x:scenario label="content: chronicle 0007">
        <x:context href="../../test/samples/pagexml_chronicle/0007_p007.xml" mode="p2t:source"/>
        <x:expect label="1 page" test="count(/t:TEI/t:text//t:pb)" select="1"/>
        <x:expect label="4 paragraphs" test="count(/t:TEI/t:text//t:p)" select="4"/>
        <x:expect label="25 lines" test="count(/t:TEI/t:text//t:lb)" select="25"/>
    </x:scenario>

    <x:scenario label="content: chronicle 0008">
        <x:context href="../../test/samples/pagexml_chronicle/0008_p008.xml" mode="p2t:source"/>
        <x:expect label="1 page" test="count(/t:TEI/t:text//t:pb)" select="1"/>
        <x:expect label="1+1 paragraphs" test="count(/t:TEI/t:text//t:p)" select="2"/>
        <x:expect label="27 lines" test="count(/t:TEI/t:text//t:lb)" select="27"/>
    </x:scenario>

    <x:scenario label="merged pages: chronicle 0007 and 0008">
        <x:param name="p2t:collection-uri"
            select="xs:anyURI('../../test/samples/pagexml_chronicle/collection.xml')"/>
        <x:call template="p2t:collection"/>
        <x:expect label="2 pages" test="count(/t:TEI/t:text//t:pb)" select="2"/>
        <x:expect label="count of paragraphs" test="count(/t:TEI/t:text//t:p)" select="5"/>
        <x:expect label="count of lines" test="count(/t:TEI/t:text//t:lb)" select="52"/>
    </x:scenario>


    <x:scenario label="PageXML without Word elements: hsde 121030, 01">
        <x:context href="../../test/samples/pagexml_hsde_121030/121030_01.xml"/>
        <x:expect label="some paragraphs" test="count(/t:TEI/t:text//t:lb) gt 0"/>
        <x:expect label="text present"
            test="count(/t:TEI/t:text//text()[normalize-space(.) ne '']) eq count(/t:TEI/t:text//t:lb)"
        />
    </x:scenario>


</x:description>
